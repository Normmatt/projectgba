Done:
- 100% sure tab file is correct
- 99% sure tab file is complete
- assembles all below instructions

Todo:
- Convert BL into parts, other jumps into correct numbers for opcodes
- Parse other things so everything assembles perfectly
- Verbose error messages (word alignment, etc.)
  - Needs to error on BLX r15 (not possible)

Tested Working Opcodes:

ADC
ADD
AND
ASR
B
BEQ
BNE
BCS
BHS
BCC
BLO
BMI
BPL
BVS
BVC
BHI
BLS
BGE
BLT
BGT
BLE
BIC
BKPT
BL1
BL2
BLX
BX
CMN
CMP
EOR
LDMIA
LDR
LDRB
LDRH
LDSB
LDSH
LSL
LSR
MOV
MUL
MVN
NEG
ORR
POP
PUSH
ROR
SBC
STMIA
STR
STRB
STRH
SUB
SWI
TST

Need to do this:
- Attempts to specify LSR/ASR#0 in source code are automatically
  redirected as LSL#0, and source LSR/ASR#32 is redirected as opcode
  LSR/ASR#0.

Make sure signed numbers work with ones they're supposed
and give errors when they're not
- example: add sp,sp,#
- sub sp,sp,# is the same with sign bit (convert to this if arg in first is neg)

Read through no$gba help and make sure everything is right

Things to add so compatible with goldroad:
 - Expressions:
   - ~ (NOT) and - (UNARY MINUS)
     - need + as well?
   - Operator precidence (C standard)
 - £ symbol (current location)
 - conditional assembly
   - @define with one argument
   - @ifdef, @ifndef, @else, @endif
   - @undef (undefine)
 - macros
 - multiple textareas (make sure it works right)
 - literal pools, =address
 - Numbers:
   - All can be prefixed with #
   - ascii
 - optional colons to mark labels
 - /* */ block comments
 - addr and nop
   - nop is mov r8,r8
 - @lineno (echos line number)
 - @org (like textarea?)
 - default textarea to 0x08000000
 - @fsize
 - @big and @little (endian-ness) (should support?)
 - @include, @incbin
 - @ascii (define as @dcb)
 - @dcb, @dcw, @dcd (allow expressions, strings (ascii), chars)
 - @dup
 - ARM compilation :P

Things that is does/will do better than goldroad:
 - More ways to specify data (b,d,h suffixes)
 - More versitile @defines (replace ANYTHING)
 - Option to compile into ROMs
 - Fixed addr psuedo-op
 - And more!

General idea of how it assembles:

tab file stores: opcode, argument type, opcode type, opcode base
it selects the line by the opcode and argument type if one doesn't
exist, error. it then gets the opcode type and ORs the arguments into
the opcode base according to the opcode type.

There is an optional, alternate opcode for arguments that accept high
registers only that it will use if no high registers are supplied.

example: add r0,r1 compiles to add r0,r1,0x1
(it does the same in goldroad, but this doesn't seem right..)

argument types:

 0 - sp,sp,#
 1 - rx,ry,rz
 2 - rx,ry,#
 3 - rx,ry
 4 - rx,#
 5 - rx
 6 - rx,[pc,#]
 7 - rx,[sp,#]
 8 - rx,[ry,rz]
 9 - rx,[ry,#]
10 - {rl,lr/pc}
11 - rx,{rl}
12 - #

^(r13,){2}(?<num>\d*)$
^(?<rx>r{1}\d{1,2}),(?<ry>r{1}\d{1,2}),(?<rz>r{1}\d{1,2})$
^(?<rx>r{1}\d{1,2}),(?<ry>r{1}\d{1,2}),(?<num>\d*)$
^(?<rx>r{1}\d{1,2}),(?<ry>r{1}\d{1,2})$
^(?<rx>r{1}\d{1,2}),(?<num>\d*)$
^(?<rx>r{1}\d{1,2})$
^(?<rx>r{1}\d{1,2}),\[(r15){1},(?<num>\d*)]$
^(?<rx>r{1}\d{1,2}),\[(r13){1},(?<num>\d*)]$
^(?<rx>r{1}\d{1,2}),\[(?<ry>r{1}\d{1,2}),(?<rz>r{1}\d{1,2})]$
^(?<rx>r{1}\d{1,2}),\[(?<ry>r{1}\d{1,2}),(?<num>\d*)]$
^{(?<rl>.+)(?:,(?<rx>r14|r15))?}$
^(?<rx>r{1}\d{1,2})!,{(?<rl>[^}]+)}$
^(?<num>\d*)$

opcode types:

 0 - rx,ry,#5
 1 - rx,ry,#4
 2 - rx,ry,#3
 3 - rx,ry,rz
 4 - rx,ry,hh
 5 - sbz,rx,h
 6 - #7,sbz,z
 7 - rx,#8
 8 - rx,ry
 9 - rx,#10>>2
10 - rx, ry, #7>>2
11 - rl,lr/pc,z
12 - rl,rx
13 - #8
14 - #11
15 - rx, ry, #6>>1